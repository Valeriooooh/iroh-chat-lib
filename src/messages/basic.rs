#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel, DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;

// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SmallText {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
}
/// \[RUST-SIGNAL\]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SmallNumber {
    #[prost(int32, tag = "1")]
    pub number: i32,
}
/// \[DART-SIGNAL\]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SomeNumber {
    #[prost(int32, tag = "1")]
    pub number: i32,
}
// @@protoc_insertion_point(module)

type SmallTextChannel = LazyLock<(
    SignalSender<DartSignal<SmallText>>,
    SignalReceiver<DartSignal<SmallText>>,
)>;
pub static SMALL_TEXT_CHANNEL: SmallTextChannel = LazyLock::new(signal_channel);

impl SmallText {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        SMALL_TEXT_CHANNEL.1.clone()
    }
}

impl SmallNumber {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(1, self.encode_to_vec(), Vec::new());
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}

type SomeNumberChannel = LazyLock<(
    SignalSender<DartSignal<SomeNumber>>,
    SignalReceiver<DartSignal<SomeNumber>>,
)>;
pub static SOME_NUMBER_CHANNEL: SomeNumberChannel = LazyLock::new(signal_channel);

impl SomeNumber {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        SOME_NUMBER_CHANNEL.1.clone()
    }
}
